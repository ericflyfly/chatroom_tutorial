<!DOCTYPE html>
<html>
  <head>
    <title>Enroll Voice</title>
    <style>
    button{ width: 23%; background: rgb(130, 224, 255); border: none; padding: 10px; margin-left: 2%; }
    </style>
    <script src="../../socket.io/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <script src="https://unpkg.com/mic-recorder-to-mp3"></script>
    <script src='/siofu/client.js'></script>
  </head>
  <body>
    <form action="/" method="POST">
        <label for="txt"> Username: </label>
        <input id="txt" autocomplete="off" autofocus="on" placeholder="Please enter here..." /> <button id = "btn_send" style=" width: 1px; height: 1px; padding: 1px; font-size:1px; margin-left: 2px;">Send</button>
        <p id="status">Status: </p>
        <button id="btn_listen"  type=button > Start Recording </button>
    </form>
    <script>
        var socket = io.connect();
        const uploader = new SocketIOFileUpload(socket);
        var recording = false;
        var login = false;
        var real_name = "";
        var socketid;

        $('#btn_listen').prop("disabled", true);

        function edit_btn_listen(txt, color){
            $("#btn_listen").html(txt);
            $("#btn_listen").css('background', color);
        }

        //set up voice recorder 
        const recorder = new MicRecorder({
            bitRate: 128
        });

        //start audio recording
        function startRecording() {
            recorder.start().then(() => {
                console.log('start recording');
            }).catch((e) => {
                console.error(e);
            });
        }
        //stop recording and create a mp3 file
        //**it create two extra empty (blob['size] > 0) audio file automatically
        function stopRecording() {
            recorder.stop().getMp3().then(([buffer, blob]) => {
            if (blob['size'] > 0){
                //console.log(buffer, blob);
                const file = new File(buffer, real_name+'.mp3', {
                    type: blob.type,
                    lastModified: Date.now()
                });
                //send files to node server
                //uploader.submitFiles([file]);
            }
            }).catch((e) => {
                console.error(e);
            });
        }
        
        socket.on('check_real_name_res', function(data){
            //console.log(msg);
            if (data['msg'] === "SUCC"){
                //console.log(data['voiceitid'])
                login = true;
                $('#txt').prop("disabled", true);
                $("#btn_listen").prop("disabled", false);
                $("#status").prop("innerHTML", "Status: You have " + data['enroll_num'] + " audio enrolled (Require at least 3 audios).");
            }
            else{
                $('#txt').val('');
            }
        });

        $('#btn_send').click(function(e){
          e.preventDefault(); // prevents page reloading
          socketid = socket.id;
          real_name = $('#txt').val();
          socket.emit('check_real_name', {"socketid": socketid, "real_name": real_name.toLowerCase()} );
          
        });

        //start voice recognition when "btn_listen" has been clicked
        $("#btn_listen").on("mousedown", function(){
            if (!recording){
                if(login){
                    startRecording();
                }
                recording = true;
                edit_btn_listen('Recording audio for enrollment...', 'lime');
            }
        }).on("mouseup mouseleave", function(){
            //"mouseleave" when mouse leave the button
            //execute when user release the mouse
            if(login){
                stopRecording();
            }
            recording = false;
            edit_btn_listen('Start recording', 'rgb(130, 224, 255)');
        });
    </script>
  </body>
</html>
